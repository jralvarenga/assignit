import i18n, { LanguageDetectorAsyncModule, Services, InitOptions } from 'i18next'
import {initReactI18next} from 'react-i18next'
import * as RNLocalize from 'react-native-localize'
import 'moment/min/locales'
import moment from 'moment'
import en from './languages/en'
import es from './languages/es'
import AsyncStorage from '@react-native-async-storage/async-storage'

export const AVAILABLE_LANGUAGES = {
  en,
  es,
}

const AVALAILABLE_LANG_CODES = Object.keys(AVAILABLE_LANGUAGES)

const languageDetector: LanguageDetectorAsyncModule = {
  type: 'languageDetector',
  async: true,
  init: (
    _services: Services,
    _detectorOptions: object,
    _i18nextOptions: InitOptions,
  ) => {
  },
  detect: (callback: (lng: string) => void) => {
    AsyncStorage.getItem('APP_LANG', (err, lng) => {
      if (err || !lng) {
        if (err) {
          console.log('Error fetching "APP_LANG" from async store', err)
        } else {
          console.log('No language is set, choosing the best available or English as fallback')
        }
        const bestLng = RNLocalize.findBestAvailableLanguage(
          AVALAILABLE_LANG_CODES,
        )

        callback(bestLng?.languageTag ?? 'en')
        return
      }
      callback(lng)
    })
  },
  cacheUserLanguage: (lng: string) => AsyncStorage.setItem('APP_LANG', lng),
}

i18n.use(languageDetector).use(initReactI18next).init({
  resources: AVAILABLE_LANGUAGES,
  react: {
    useSuspense: false,
  },
  interpolation: {
    escapeValue: false,
  },
  defaultNS: 'common',
})

i18n.on('languageChanged', (lng: string) => moment.locale(lng))